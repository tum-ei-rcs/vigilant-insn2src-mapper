#include "bincfg/dwarf/DwarfLocation.hpp"
#include <map>

static const std::map<Dwarf_Small, const std::string> s_opStrings {
    #define OSTR(a) {DW_OP_##a, "DW_OP_" #a},

    OSTR(addr)
    OSTR(deref)
    OSTR(const1u)
    OSTR(const1s)
    OSTR(const2u)
    OSTR(const2s)
    OSTR(const4u)
    OSTR(const4s)
    OSTR(const8u)
    OSTR(const8s)
    OSTR(constu)
    OSTR(consts)
    OSTR(dup)
    OSTR(drop)
    OSTR(over)
    OSTR(pick)
    OSTR(swap)
    OSTR(rot)
    OSTR(xderef)
    OSTR(abs)
    OSTR(and)
    OSTR(div)
    OSTR(minus)
    OSTR(mod)
    OSTR(mul)
    OSTR(neg)
    OSTR(not)
    OSTR(or)
    OSTR(plus)
    OSTR(plus_uconst)
    OSTR(shl)
    OSTR(shr)
    OSTR(shra)
    OSTR(xor)
    OSTR(bra)
    OSTR(eq)
    OSTR(ge)
    OSTR(gt)
    OSTR(le)
    OSTR(lt)
    OSTR(ne)
    OSTR(skip)
    OSTR(lit0)
    OSTR(lit1)
    OSTR(lit2)
    OSTR(lit3)
    OSTR(lit4)
    OSTR(lit5)
    OSTR(lit6)
    OSTR(lit7)
    OSTR(lit8)
    OSTR(lit9)
    OSTR(lit10)
    OSTR(lit11)
    OSTR(lit12)
    OSTR(lit13)
    OSTR(lit14)
    OSTR(lit15)
    OSTR(lit16)
    OSTR(lit17)
    OSTR(lit18)
    OSTR(lit19)
    OSTR(lit20)
    OSTR(lit21)
    OSTR(lit22)
    OSTR(lit23)
    OSTR(lit24)
    OSTR(lit25)
    OSTR(lit26)
    OSTR(lit27)
    OSTR(lit28)
    OSTR(lit29)
    OSTR(lit30)
    OSTR(lit31)
    OSTR(reg0)
    OSTR(reg1)
    OSTR(reg2)
    OSTR(reg3)
    OSTR(reg4)
    OSTR(reg5)
    OSTR(reg6)
    OSTR(reg7)
    OSTR(reg8)
    OSTR(reg9)
    OSTR(reg10)
    OSTR(reg11)
    OSTR(reg12)
    OSTR(reg13)
    OSTR(reg14)
    OSTR(reg15)
    OSTR(reg16)
    OSTR(reg17)
    OSTR(reg18)
    OSTR(reg19)
    OSTR(reg20)
    OSTR(reg21)
    OSTR(reg22)
    OSTR(reg23)
    OSTR(reg24)
    OSTR(reg25)
    OSTR(reg26)
    OSTR(reg27)
    OSTR(reg28)
    OSTR(reg29)
    OSTR(reg30)
    OSTR(reg31)
    OSTR(breg0)
    OSTR(breg1)
    OSTR(breg2)
    OSTR(breg3)
    OSTR(breg4)
    OSTR(breg5)
    OSTR(breg6)
    OSTR(breg7)
    OSTR(breg8)
    OSTR(breg9)
    OSTR(breg10)
    OSTR(breg11)
    OSTR(breg12)
    OSTR(breg13)
    OSTR(breg14)
    OSTR(breg15)
    OSTR(breg16)
    OSTR(breg17)
    OSTR(breg18)
    OSTR(breg19)
    OSTR(breg20)
    OSTR(breg21)
    OSTR(breg22)
    OSTR(breg23)
    OSTR(breg24)
    OSTR(breg25)
    OSTR(breg26)
    OSTR(breg27)
    OSTR(breg28)
    OSTR(breg29)
    OSTR(breg30)
    OSTR(breg31)
    OSTR(regx)
    OSTR(fbreg)
    OSTR(bregx)
    OSTR(piece)
    OSTR(deref_size)
    OSTR(xderef_size)
    OSTR(nop)
    OSTR(push_object_address)
    OSTR(call2)
    OSTR(call4)
    OSTR(call_ref)
    OSTR(form_tls_address)
    OSTR(call_frame_cfa)
    OSTR(bit_piece)
    OSTR(implicit_value)
    OSTR(stack_value)
    OSTR(implicit_pointer)
    OSTR(addrx)
    OSTR(constx)
    OSTR(entry_value)
    OSTR(const_type)
    OSTR(regval_type)
    OSTR(deref_type)
    OSTR(xderef_type)
    OSTR(convert)
    OSTR(reinterpret)
    /* GNU extensions. */
    OSTR(GNU_push_tls_address)
    /* Follows extension so dwarfdump prints the most-likely-useful name. */
    OSTR(lo_user)
    OSTR(GNU_uninit)
    OSTR(GNU_encoded_addr)
    OSTR(GNU_implicit_pointer)
    OSTR(GNU_entry_value)
    OSTR(GNU_const_type)
    OSTR(GNU_regval_type)
    OSTR(GNU_deref_type)
    OSTR(GNU_convert)
    OSTR(GNU_reinterpret)
    OSTR(GNU_parameter_ref)
    OSTR(GNU_addr_index)
    OSTR(GNU_const_index)
    /* HP extensions. */
    OSTR(HP_unknown)
    OSTR(HP_is_value)
    OSTR(HP_fltconst4)
    OSTR(HP_fltconst8)
    OSTR(HP_mod_range)
    OSTR(HP_unmod_range)
    OSTR(HP_tls)
    OSTR(INTEL_bit_piece)
    /* Apple extension. */
    OSTR(APPLE_uninit)
    OSTR(PGI_omp_thread_num)
    OSTR(hi_user)

    #undef OSTR
};


const std::string&
Dwarf::getOpType(Dwarf_Small opType)
{
    static const std::string unknownType = "UNKNOWN_OP";

    auto it = s_opStrings.find(opType);
    if (it != s_opStrings.end()) {
        return it->second;
    }
    else {
        return unknownType;
    }
}